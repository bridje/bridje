(ns brj.core
  {:aliases {forms brj.forms
             Core (java brj.runtime.CoreKt
                        (:: (empty [a]) Bool)
                        (:: (countVec [a]) Int)
                        (:: (countSet [a]) Int)
                        (:: (first [a]) a)
                        (:: (rest [a]) [a])
                        (:: (str [Str]) Str))}})

(def empty? Core/empty)
(def first Core/first)
(def rest Core/rest)

(defmacro (if-not pred then else)
  `(if ~pred ~else ~then))

(:: (Seq a))
(:: (:Cons a) a (Seq a))
(:: :Nil)
(:: (Seq a) (+ (:Cons a) :Nil))

(:: (. a) (count a) Int)

(def (. [a]) (count v)
  (Core/countVec v))

(def (. #{a}) (count s)
  (Core/countSet s))

;(:: (. s) (seq (s a)) (Seq a))

;(def (. []) (seq v)
;  (if (empty? v)
;    :Nil
;    (:Cons (first v) (rest v))))

;(:: (-> forms/Form [forms/Form]) forms/Form)

;(defmacro (-> form & forms)
;  (case (seq forms)
;    (:Cons first-form more-forms)
;    `(-> ~(case first-form
;            (:forms/ListForm fs) (case (seq more-forms)
;                                   (:Cons f args) `(~f ~form ~@args)
;                                   :Nil form)
;
;            `(~first-form ~form))
;
;         ~@more-forms)
;
;    :Nil
;    form))

(defmacro (str & strs)
  `(Core/str [~@strs]))

;(:: (. a) (count a) Int)

;(def (. [a]) count Core/count)
