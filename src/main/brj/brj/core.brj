(ns brj.core
  {:aliases {forms brj.forms}
   :imports {Core (java brj.CoreKt
                        (:: (empty [a]) Bool)
                        (:: (count [a]) Int)
                        (:: (first [a]) a)
                        (:: (rest [a]) [a])
                        (:: (str [Str]) Str))}})

(def empty? Core/empty)
(def count Core/count)
(def first Core/first)
(def rest Core/rest)

(defmacro (if-not pred then else)
  `(if ~pred ~else ~then))

(:: (:Cons a) a [a])
(:: :Nil)
(:: (Seq a) (+ (:Cons a) :Nil))

(:: (seq [a]) (Seq a))
(def (seq v)
  (if (empty? v)
    :Nil
    (:Cons (first v) (rest v))))

(:: (-> forms/Form [forms/Form]) forms/Form)

(defmacro (-> form & forms)
  (case (seq forms)
    (:Cons first-form more-forms)
    `(-> ~(case first-form
            (:forms/ListForm fs) (case (seq more-forms)
                                   (:Cons f args) `(~f ~form ~@args)
                                   :Nil form)

            `(~first-form ~form))

         ~@more-forms)

    :Nil
    form))

(def str* Core/str)

(defmacro (str & strs)
  `(str* [~@strs]))
