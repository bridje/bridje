mutable state.

clojure's approach - you can have something mutable well within an otherwise immutable structure
callers don't necessary know either that this nested mutability exists nor whether a function it calls mutates it

rust does - need to lend an object mutably if the function's to mutate it
interesting to see what it does with polymorphism - does the interface have to specify whether any implementations can be mutable?
  seems that way - the trait function has to declare whether/how the function borrows its parameters
  we're back to the 'borrowing or not' question.

#+begin_src clojure
  (:: (:Taker n) (Mut Int))

  (def (. :Taker a) (.step (:Taken n)))
#+end_src
