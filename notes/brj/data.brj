;; defkeys/defunion

(defkeys
  {(left a) (Tree a)
   (node a) a
   (right a) (Tree a)})

(defunion (Tree a)
  (Node {(left a) (node a) (right a)})
  Leaf)

(defkeys
  {user-id UUID
   username Str
   first-name Str
   last-name Str})

(:: (max Int Int) Int)

(defunion (Maybe a)
  (Just a)
  Nothing)

;; typeclasses

(defclass (Functor f)
  (:: (fmap (f a) (Fn [a] b)) (f b)))

(definstance (Functor Maybe)
  (def (fmap maybe f)
    (case maybe
      (Just a) (Just (f a))
      _ Nothing)))

(defclass #{(Functor m)} (Monad m)
  (:: (bind (m a) (Fn [a] (m b))) (m b))
  (:: (return a) (m a)))

(definstance (Monad Maybe)
  (def (return a)
    (Just a))

  (def (bind maybe f)
    (case maybe
      (Just a) (f a)
      _ Nothing)))

;; namespace

(ns social.bar
  {alias {u social.user}
   refer {social.user #{User foo?}}})

;; destructuring

(:: (foo {foo foo-address u/id u/?first-name u/?last-name u/address & r})
    Int)

(def (foo {. #{u/id foo}
           u/?first-name ?prenom,
           u/?last-name ?nom,
           u/address (Address {* a})

           foo-address (Address {. #{u/line1}})
           * all-of-it))
  ...)

(def (foo {. #{foo}}))

(foo {* #{u/id},
      u/first-name prenom
      foo? true)})
