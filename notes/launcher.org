what do we want from the launcher?

Clojure's launcher has mvn dependency resolution, they don't want to force people into a big build tool just to use Clojure
couple of command line flags to start namespaces, run forms, etc

npm doesn't have any option but to present a launcher - there's no underlying tool
the graal version wants to be backward compatible with existing tooling - not a problem we have here.

we probably also want shebang support, so that people can write bridje scripts, don't want to rule that out
as soon as people use a build tool (likely Gradle, I guess we'd recommend), we'll want to use that to run tests, etc
but maybe, to start a REPL in a project, run tests, etc, we might want to use a brj launcher
we don't want to faff about with generating our own classpaths, though
we probably want to decouple starting a REPL from the user's application, starting it through a java property, like Clojure does

native image support - we may well want to be able to create a native image of someone's application - brj might be a natural place to do this

how would we get the classpath, though?
we can probably write plugins for various build tools that generates a bridje launcher
we'd need classpath, jvm opts, java properties?
native image doesn't have a classpath

how's about
- brj bash script, initial launcher
- brj CLI (standalone native image), splits CLI params into Java params and Bridje params
- brj native-image, starts application
  - this would then need to add a whole load of jars to the classpath - which it may not be able to do under native-image
  - maybe this is a good split, then? split out java deps and bridje deps, maybe even make yourself a native image which already contains any JARs you need

need to be conscious about keeping this compatible with standard polyglot access - can't rely that everyone using it is going to use it via our launcher
- bridjepath would likely be an argument to be passed to the context

ok. overnight.
- we can read all the JAR files from the classpath in when we initialize the context, read the brj files in to a directory in .brj-cache or something (can make that configurable)
- can then add that to a bridjepath which we keep in app - all the directories on the classpath can stay as-is
- might take a time to initialize each context if it has to copy all the JAR files over, but then again, might take a while to re-compile everything if that's what's asked for
- we don't want each context to completely re-require all of bridje, that'd be crazy, I think.
- initially, we can just read the JAR files into those directories, only needs to be done once, on language load
- are we to assume that, generally speaking, we'd have one context per JVM? probably can't assume that
- we can pull each jarfile in, under its sha1 hash
