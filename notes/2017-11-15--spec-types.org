* Spec types?
ok, so we have a concept of attributes, and a concept of datatypes (maybe?)
tbh, the name of the type shouldn't really depend on where it's defined - we'd like to move definitions without changing the data

mutually recursive types?
parameterised types?

#+BEGIN_SRC clojure
  (defrec
    (defdata User
      {:id UUID
       :username String})

    (defdata Store
      {:id UUID
       :key {:req #{:User.id :Store.id}}
       :label String})

    (defdata (Maybe a)
      (Just a)
      Nothing)

    (defdata (Tree a)
      (Node {:req {:left (Tree a)
                   :right (Tree a)}})

      (Leaf a)))

  (:james/Store.key store)

  (:james/Node.left tree)

  (Node {:left (Leaf 5)
         :right (Node {:left (Leaf 10)
                       :right (Leaf 20)})})

  (:james/Just.0 my-just)
#+END_SRC

- what's the type of Type?

#+BEGIN_SRC clojure
  (defrec
    (defdata Type
      Int
      Float
      BigInt
      BigFloat
      String
      Bool
      (Vector Type)
      (Set Type)
      (Fn [Type] Type)
      (Record {:opt {:req (Set Attribute)
                     :opt (Set Attribute)}})

      (TypeVar String)

      ;; more? applied type?
      ;; keywords as type aliases?
      ))
#+END_SRC
