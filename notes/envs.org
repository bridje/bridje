* Environments
- we've got to respond to parse requests, essentially given a context and a source
- source potentially has multiple forms - requires, aliases, values and namespaces

previously I've wanted an 'immutable runtime environment' - why?
- largely because of the issues within Clojure with consistency of redefined functions
  - particularly, eval a function, eval another function that depends on
  - more important because it's a typed language - incompatible change to the type of a fn mean re-compile
  - other typed langs (Java, Kotlin, Haskell) are re-compile the world when a function changes
  - difference here is that we're REPL based, so there's the expectation that we don't need a build
  - deleting functions, too
  - it'll help that we're compiling at the namespace level, that'll get a decent chunk
  - GHCi is the closest they come to a REPL - let bindings in that REPL don't get updated when a dependent updates
  - so can we make namespaces behave in the same way?
  - or we can re-compile on-demand
    - i.e. we leave the bulk of the system to behave in the same way
    - values (i.e. closures) continue to behave in the same way for their lifetimes
    - as soon as we call a function that relies on an out-of-date namespace, we re-compile
  - let's give the user fine-grained control over contexts - we shouldn't re-use them

