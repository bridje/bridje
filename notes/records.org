problem: how do we express spec-like records in a type-system?

we'd like to be able to say that records don't need to specify, ahead-of-time, what keys they need to contain
(well, don't see why they shouldn't specify defaults, but this shouldn't preclude us from accepting more/less at callsites)
spec2 specifies a complete set with the key, and then the callsite defines which ones are required. this seems reasonable.

let's use the hiccup one - that's probably about as close to a recursive one as we're likely to get

#+begin_src clojure
  (:: :user-id Uuid)
  (:: :first-name Str)
  (:: :last-name Str)
  (:: :email Str)
  (:: :user {:user-id :first-name :last-name})

  (:: :parent {:user-id :email :parent})

  (:: PartUser {(:user {:user-id :email (:parent {:user-id :email})})})

  (:: (delete-user! {PartUser}))


  (def (delete-user! {(:user {user-id email})})
    )

  ;; nice that destructuring and schema selection look exactly the same

  ;; types.
#+end_src

records are typed extensively, so that we can add any extra keys that we need to the record
they also have the type param s.t. we can update records - we can say that the output record has all the keys of the input record, plus or minus a couple
but then how does that apply to nested/recursive records?

nested should be alright - each level of the record has a type var. will likely mean that we have a ton of type-vars in most functions?
especially if it's a complex structure...
maybe we keep the record type vars separate, they don't serve a lot of purpose being raised to the front of a type sig.
but there're still going to be tons of the buggers

recursive. we can specify a selected schema. in practice, this is either going to be the same, or a horrifically irregular structure
to that extent, is it necessary? we can certainly say that
maybe we only specify the type params when it's required, for updating a map. otherwise we don't really care.
i.e. when we are updating a structure, we care that it's returning the same structure, otherwise we don't - we're not going to be returning it anyway
  type might be =(Fn {:foo (& a)} (Fn {:foo} {:bar}) {:foo :bar (& a)})=
we also likely don't care that two parameter maps have exactly the same keys
  so maybe we only specify it when there are two usages of the same type-var
so, the rule is that if you don't specify it, you don't get to use it
if we do update a nested map, it means we do need to specify type params all the way down.

lenses?
what's a lens for updating a nested structure going to look like?
#+begin_src clojure
  (:: :foo Int)

  (:: :FooLens)

  (def (. :FooLens {:foo (& a)} Int) (.focus _ {foo})
    foo)

  (def (. :FooLens {:foo (& a)} Int Int {:foo (& a)}) (.fmap _ {foo (* r)} f)
    (assoc r :foo (f foo)))
#+end_src
