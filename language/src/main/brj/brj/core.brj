(ns brj.core
  {:aliases {forms brj.forms
             bi brj.built-ins}})

(def empty? bi/empty?)
(def first bi/first)
(def rest bi/rest)

(def concat bi/concat)

(defmacro (if-not pred then else)
  `(if ~pred ~else ~then))

(:: (Seq a))
(:: (:Cons a) a (Seq a))
(:: :Nil)
(:: (Seq a) (+ (:Cons a) :Nil))

(#_
 (:: (-> forms/Form [forms/Form]) forms/Form)

 (defmacro (-> form & forms)
   (case (seq forms)
     (:Cons first-form more-forms)
     `(-> ~(case first-form
             (:forms/ListForm fs) (case (seq more-forms)
                                    (:Cons f args) `(~f ~form ~@args)
                                    :Nil form)

             `(~first-form ~form))

          ~@more-forms)

     :Nil
     form)))

(defmacro (str & strs)
  `(bi/str [~@strs]))
