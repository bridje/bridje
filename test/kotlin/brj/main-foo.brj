(ns foo
  {:aliases {b bar, forms brj.forms}
   :refers {bar #{baz}}
   :imports {Foo (java brj.Foo
                       (:: (isZero Int) Bool)
                       (:: (dec Int) Int)
                       (:: (conj #{a} a) #{a})
                       (:: (plus Int Int) Int)
                       (:: (str Str Str) Str)
                       (:: (println Str) Str))}})

(:: :Void)
(:: Void (+ :Void))

(:: (:Just a) a)
(:: :Nothing)

;; (:: foo [(+ (:Just Int) :Nothing)])
(def foo [:Nothing (:Just 4)])

(def bar
  (case (:Just 4)
    (:Just x) x
    :Nothing 0))

(def just (:Just 4))

(def x
  (let [quux 10N]
    [quux baz]))

(:: (! (println! Str)) Str)
(def (! (println! s))
  (Foo/println s))

(:: (! (read-line!)) Str)

(:: :first-name Str)
(:: :last-name Str)
;; (:: User {:first-name :last-name})

(def (count-down x)
  (loop [y x
         res #{}]
    (if (Foo/isZero y) res (recur (Foo/dec y) (Foo/conj res y)))))

(def counted-down (count-down 5))

(:: (my-fn a a) [a])
(def (my-fn x y)
  (with-fx [(def (println! s)
              (foo/println! (Foo/str "intercepted: " s)))]
    (println! "Hello world!")
    [y x]))

;(defmacro (if-not pred then else)
;  (:forms/ListForm ['if else then]))
